def add(n, i):
    return n + i


def test():
    for i in range(4):
        yield i


g = test()

for n in [1, 10, 6]:
    # g = [add(n, i) for i in g] #如果是这样，那你的理解是对的
    g = (add(n, i) for i in g)
    print(type(g))

print(f'最后的结果:{list(g)}')
# print(f'最后的结果:{list(g)}')

"""
你的理解：
第一次：n=1，g = (1,2,3,4)
第二次：n=10，i为（1,2,3,4）中的一个，然后相加，得到g为（11,12,13,14）
第三次：n=5，i为（11,12,13,14）中的一个，然后相加，得到g为（16,17,18,19）
"""
"""
实际上：
第一次：n=1，g = (0+n,1+n,2+n,3+n) #注意这里
第二次：n=10，g = (0+n+n,1+n+n,2+n+n,3+n+n) 
第三次：n=5，g = (0+n+n+n,1+n+n+n,2+n+n+n,3+n+n+n) 
最后你print(list(g))这里相当于运行了生成器 ，也就是他开始计算(0+n+n+n,1+n+n+n,2+n+n+n,3+n+n+n) 
当是这个时候n已经等于5 了
于是(0+n+n+n,1+n+n+n,2+n+n+n,3+n+n+n) => [15, 16, 17, 18]
总结 生成器有惰性计算性质（不调用他，他都是保存的表达式，调用的时候再运算表达式。）
"""
