SCP 远程拷贝
        1. 本地复制到远程
            scp 本地文件地址 用户名@远程地址或主机名:远程文件地址
            scp 本地文件地址 远程地址或主机名:远程文件地址

        2. 远程复制到本地
            scp 用户名@远程地址或主机名:远程文件地址 本地文件地址
            scp 远程地址或主机名:远程文件地址 本地文件地址

        3. 远程复制到远程
            scp 用户名@远程地址或主机名:远程文件(夹)地址 用户名@远程地址或主机名:远程文件(夹)地址

crontab 定时任务
        ./test.sh >> 1.log 在末尾输出日志
        ./test.sh > 1.log 覆盖输出日志
        /var/spool/cron/用户名（root） crontab -e的路径
        tail -f /var/log/cron 查看定时任务运行的情况日志
date 输出时间
        date "+%Y-%m-%d %H:%M:%S" =>2020-03-18 23:14:24
less 浏览文件
        -b 《缓冲区大小》 设置缓冲区的大小
        -e 当文件显示结束后，自动离开
        -f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件
        -g 只标志最后搜索的关键词
        -i 忽略搜索时的大小写
        -m 显示类似more命令的百分比
        -N 显示每行的行号
        -o 《文件名》 将less 输出的内容在指定文件中保存起来
        -Q 不使用警告音
        -s 显示连续空行为一行
        -S 行过长时间将超出部分舍弃
        -x 《数字》 将“tab”键显示为规定的数字空格
        /字符串：向下搜索“字符串”的功能
        ？字符串：向上搜索“字符串”的功能
        n：重复前一个搜索（与 / 或 ？ 有关）
        N：反向重复前一个搜索（与 / 或 ？ 有关）
        b 向后翻一页
        d 向后翻半页
        h 显示帮助界面
        Q 退出less 命令
        u 向前滚动半页
        y 向前滚动一行
        空格键 滚动一行
        回车键 滚动一页
        [pagedown]： 向下翻动一页
        [pageup]： 向上翻动一页
        g 跳到文件头    【常用】
        G 跳到文件尾部  【常用】

linux 桌面路径
    /usr/local/bin   比如/usr/local/bin/fuck.sh 这样的话在任何目录都可以运行 fuck.sh(脚本前面加#！/bin/bash)

linux 几种全局路径
    ~/.bash_profile文件：只表示当前用户的个人设置，生效后只该用户可用。
    /etc/bashrc 适用于所有用户
    /root/.bashrc 适用于管理员用户（root用户）
    /home/ [username] /.bashrc 适用于一般用户username
    设置好啦以后注意 source 加上你设置的路径 否则不会生效
time 任何命令前面加上这个都可以知道运行时间

nc 测试服务器端口是否正常工具  nc -w 10 127.0.0.1  8888

lsof -i:80 查看哪个东西占用这个端口（lsof这个命令很好用 具体可以tldr一下）


# 压缩文件 file1 和目录 dir2 到 test.tar.gz
tar -zcvf test.tar.gz file1 dir2
# 解压 test.tar.gz（将 c 换成 x 即可）
tar -zxvf test.tar.gz
# 列出压缩文件的内容
tar -ztvf test.tar.gz

watch：周期性的执行给定的命令，并将命令的输出以全屏方式显示。

bc：命令行科学计算器。

killall：通过进程名终止进程。

pkill：通过进程名终止进程。

获取字符串长度

    在${}中使用“#”获取长度
    name="test";
    echo ${#name}; # 输出为4


提取子字符串[切片]

    1:4 从第2个开始 往后截取4个字符
    ::4 从第一个字符开始 往后截取4个字符
    name="this is my name";
    echo ${name:1:4} #输出 is i
    echo ${name::4} #输出 this


shell脚本参数传递

    获取参数值：
    $0 ： 固定，代表执行的文件名
    $1 ： 代表传入的第1个参数
    $n ： 代表传入的第n个参数

    \$#：参数个数
    \$*： 以一个单字符串显示所有向脚本传递的参数。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数
    \$@：与$*相同，但是使用时加引号，并在引号中返回每个参数。
    \$\$：脚本运行的当前进程号
    \$！：后台运行的最后一个进程的ID
    \$?： 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
    \$* 与 $@ 区别
    相同点：都是引用所有参数。
    不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。

croc安装
    curl https://getcroc.schollz.com | bash （centos）
    scoop install croc（windos）
    curl https://getcroc.schollz.com | bash （centos）

centos冒号的作用

1。:>test.txt 可以清空文件内容

2。可以当占位符
    if [ "today" == "2011-08-29" ]; then
        :
    else
        :
    fi


shell的for循环：
for k in `ls`;do echo $k;done

for k in `seq 100`;do echo $k;done #这里seq ～= range（100）

for k in `seq 100`;do echo $k`curl --proxy http://127.0.0.1:8080 "http://wttr.in/Dunedin?0" -s`;done

设置别名命令（linux和mac）
教程地址：https://blog.csdn.net/lisongjia123/article/details/77962144?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase

---------
详细教程（166个命令）
https://www.zhihu.com/question/397371213/answer/1516429359?utm_source=wechat_session&utm_medium=social&utm_oi=995698089314795520&utm_content=group3_Answer&utm_campaign=shareopn

shell脚本的相关知识点
https://zhuanlan.zhihu.com/p/264346586?utm_source=wechat_session&utm_medium=social&utm_oi=995698089314795520

curl ip.sb
curl cip.cc

ls -lh  $(find / -type f -size +100M) 查找大于100m的文件

:() { :|:& };:       fork炸弹 实际是一个无限递归的流程，不断的fork子进程，消耗系统资源
cp -r 递归复制（可以复制有目录的文件夹 cp -r a/ b/）
nohup python3 -u xxx.py params1 > nohup.out 2>&1 &  centos后台运行
lspci | grep -i nvidia 判断是否有gpu，并查看型号
lsattr 命令用于显示文件属性。
cd - 返回上次目录
!! 执行上次命令


init 0 关机

init 1 单用户模式字符界面（系统维护时使用，破解密码可用）

init 2 多用户模式无网络字符界面

init 3 多用户模式有网络字符界面

init 4 保留

init 5 多用户模式图形化界面

init 6 重启 （reboot 也可重启）


“^……”表示以……开头， "……$"表示以……结尾

”^$“表示空行

#查看日志中，包含“表名:”或者“包含SQL:”的行！
cat 2019-02-22.log | grep  "^\(表名:\|SQL:\).*$"

#查看日志中，包含“表名:”或者“包含SQL:”的行！，但是还需要过滤掉select语句
cat 2019-02-22.log | grep  "^\(表名:\|SQL:\).*$" | grep -v -i 'select'

#查看日志中，将这部分日志追加到某个文件中
#如果是覆盖，就使用 ">"
cat 2019-02-22.log | grep  "^\(表名:\|SQL:\).*$" | grep -v -i 'select' >> 20190222.log




